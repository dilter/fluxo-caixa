// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Stone.Lancamento.Domain.Lancamentos.ValueObjects;
using Stone.Lancamento.Persistence.Configuration;
using Stone.Sdk.Domain;
using System;

namespace Stone.Lancamento.Persistence.Migrations
{
    [DbContext(typeof(LancamentosDbContext))]
    [Migration("20180611183441_AddTaxaFieldContaBancaria")]
    partial class AddTaxaFieldContaBancaria
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Stone.Lancamento.Domain.Contas.Entities.ContaBancaria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Banco");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("EmpresaId");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Limite");

                    b.Property<string>("Numero");

                    b.Property<decimal>("TaxaUtilizacaoLimite");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ContaBancaria");
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Contas.Entities.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RazaoSocial");

                    b.HasKey("Id");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Lancamentos.Entities.Consolidacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("Data");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("Consolidacao");
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Lancamentos.Entities.Lancamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContaDestino");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Descricao");

                    b.Property<DateTime>("Em");

                    b.Property<decimal>("Encargos");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MensagemProcessamento");

                    b.Property<int>("Situacao");

                    b.Property<int>("Tipo");

                    b.Property<int>("TipoConta");

                    b.Property<decimal>("Valor");

                    b.HasKey("Id");

                    b.ToTable("Lancamento");
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Lancamentos.Entities.Pagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConsolidacaoId");

                    b.Property<Guid?>("ContaBancariaId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("Em");

                    b.Property<decimal>("Encargos");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LancamentoId");

                    b.Property<decimal>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("ConsolidacaoId");

                    b.HasIndex("ContaBancariaId");

                    b.HasIndex("LancamentoId");

                    b.ToTable("Pagamento");
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Lancamentos.Entities.Recebimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConsolidacaoId");

                    b.Property<Guid?>("ContaBancariaId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("Em");

                    b.Property<decimal>("Encargos");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LancamentoId");

                    b.Property<decimal>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("ConsolidacaoId");

                    b.HasIndex("ContaBancariaId");

                    b.HasIndex("LancamentoId");

                    b.ToTable("Recebimento");
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Contas.Entities.ContaBancaria", b =>
                {
                    b.HasOne("Stone.Lancamento.Domain.Contas.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Contas.Entities.Empresa", b =>
                {
                    b.OwnsOne("Stone.Sdk.Domain.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<Guid?>("EmpresaId");

                            b1.Property<string>("Value")
                                .HasColumnName("Cnpj_Value");

                            b1.ToTable("Empresa");

                            b1.HasOne("Stone.Lancamento.Domain.Contas.Entities.Empresa")
                                .WithOne("Cnpj")
                                .HasForeignKey("Stone.Sdk.Domain.Cnpj", "EmpresaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Lancamentos.Entities.Lancamento", b =>
                {
                    b.OwnsOne("Stone.Sdk.Domain.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("LancamentoId");

                            b1.Property<string>("Value")
                                .HasColumnName("Cnpj_Value");

                            b1.ToTable("Lancamento");

                            b1.HasOne("Stone.Lancamento.Domain.Lancamentos.Entities.Lancamento")
                                .WithOne("Cnpj")
                                .HasForeignKey("Stone.Sdk.Domain.Cnpj", "LancamentoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Lancamentos.Entities.Pagamento", b =>
                {
                    b.HasOne("Stone.Lancamento.Domain.Lancamentos.Entities.Consolidacao", "Consolidacao")
                        .WithMany("Pagamentos")
                        .HasForeignKey("ConsolidacaoId");

                    b.HasOne("Stone.Lancamento.Domain.Contas.Entities.ContaBancaria", "ContaBancaria")
                        .WithMany()
                        .HasForeignKey("ContaBancariaId");

                    b.HasOne("Stone.Lancamento.Domain.Lancamentos.Entities.Lancamento", "Lancamento")
                        .WithMany()
                        .HasForeignKey("LancamentoId");
                });

            modelBuilder.Entity("Stone.Lancamento.Domain.Lancamentos.Entities.Recebimento", b =>
                {
                    b.HasOne("Stone.Lancamento.Domain.Lancamentos.Entities.Consolidacao", "Consolidacao")
                        .WithMany("Recebimentos")
                        .HasForeignKey("ConsolidacaoId");

                    b.HasOne("Stone.Lancamento.Domain.Contas.Entities.ContaBancaria", "ContaBancaria")
                        .WithMany()
                        .HasForeignKey("ContaBancariaId");

                    b.HasOne("Stone.Lancamento.Domain.Lancamentos.Entities.Lancamento", "Lancamento")
                        .WithMany()
                        .HasForeignKey("LancamentoId");
                });
#pragma warning restore 612, 618
        }
    }
}
